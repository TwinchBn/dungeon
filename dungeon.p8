pico-8 cartridge // http://www.pico-8.com
version 27
__lua__
--dungeon
--by ben + jeffu warmouth

function _init()
	gravity=.2
	init_enemies()
	init_items()
	init_player()
	init_ui()
	init_cam(true) --true=halfsize
end --_init()

function _update()
	--poke(0x5f00+92,255)
	log={}
 update_player()
 update_enemies()
 update_items()
 update_ui()
 update_cam()
end --_update()

function _draw()
	cls()
	draw_cam()
	--map(0,0,0,0,128,64)
 map(0,0,0,0,128,64)
 foreach(enemies,draw_enemy)
 draw_player(true)
 camera(0,0)
 draw_ui()
end --_draw()


--------------------
-----  buttons  ----
--------------------
function btnu(b)
	if b==⬆️ or b==🅾️ then
		if not btn(b) and p.⬆️ then
			p.⬆️ = false
			return true
		end
	end
end --btnu

function btnd(b)
		if b==⬆️ or b==🅾️ then
		if btn(b) and not p.⬆️ then
			p.⬆️ = true
			return true
		end
	end
end --btnd


--------------------
-----  utility  ----
--------------------
function lerp(a,b,t)
	return a + t * (b-a)
end --lerp()

function movet(a,b,m)
	local d = abs(b-a) --distance
	if (d<=m) return b
	--if (b<a) m *= -1
	--return a + d * m
	return a + sgn(b-a) * m
end --movetowards



--------------------
-----  camera  -----
--------------------
function init_cam(half)
	cam={}
	gamew,gameh=128,128
	cam.w,cam.h=gamew/2,gameh/3
	if (half) then
		poke(0x5f2c,3)
		gamew,gameh=64,64
		cam.w,cam.h=gamew/2,gameh/2
	end    
	cam.lx=p.x
	cam.ly=p.y
	cam.x=p.x-cam.w
	cam.y=p.y-cam.h
	cam.cx=0
	cam.cy=0
	camx_timer=30
	camy_timer=60
	camxspeed=0
	camyspeed=0
end

function update_cam()
	--no lerp
	--[
	cam.x=p.x-cam.w
	cam.y=p.y-cam.h
	--]]
	
	--lerp cam x speed
	--[[
	cam.cx=movet(cam.cx,p.cx,1/5)
	cam.cy=movet(cam.cy,p.cy,1/5)
	cam.x += cam.cx
	cam.y += cam.cy
	add(log,"cam: "..cam.x..","..cam.y)
	--]]

	
	--update cam x
	--[[
	if lerpx==p.x then
		camx_timer=15
	else
		camx_timer -= 1
		if camx_timer<0 then
			lerpx=lerp(lerpx,p.x,.2)
			if (abs(lerpx-p.x)<1) lerpx=p.x
		end
	end
		--update cam y
	if lerpy==p.y then
		camy_timer=20
	else
		camy_timer -= 1
		if camy_timer<0 then
			lerpy=lerp(lerpy,p.y,.2)
			if (abs(lerpy-p.y)<1) lerpy=p.y
		end
	end
	
 if hitground() or onladder() then
 	--lerpy=lerp(lerpy,p.y,0.15)
 end
 --]]
end --update_cam()

function draw_cam()
	--camera(lerpx-camw,lerpy-camh)
	camera(cam.x,cam.y)
end
 

-->8
--ui

function init_ui()
	--log={}
	dpanel={"you have been","pixelated","❎ restart"}
 	
	set_ipanel({"⬅️⬇️⬆️➡️ move"},300)
	uh={x=0,y=0,w=12,h=0,cb=8,cf=11} --health
	uk={x=0,y=2,w=6,h=3} --keys
end --make_ui()

function update_ui()
	if ipanel_timer then
		ipanel_timer -= 1
		if ipanel_timer <=0 then
			ipanel=nil
			ipanel_timer=nil
		end
	end
end --update_ui()

function set_ipanel(msg,t)
	ipanel=msg
 if (t==nil) ipanel_timer=30
end

function draw_ui()
	--foreach (ui,draw_panel)
	--draw_panel(cpanel,"l","b",1,8)
	if (ipanel) then
		draw_panel(ipanel,"c","b",1,8,true)
	end
 if (log) then
 	--draw_panel(log,"r","b",1,8)
 end
 for i=1,p.keys do
 	spr(93,uk.x+uk.w*(i-1),uk.y)
 end
 healthbar()
 if (p.dead) then
 	draw_panel(dpanel,"c","c",1,8,true)
 	if btnp(❎) then
 	 reload(0x2000, 0x2000, 0x1000)
 		_init()
 	end --if btnp(❎)
 end --if p.dead
end

function healthbar()
	--rectfill(0,0,20,0,8)
	uh.fill=uh.w*p.health/p.maxhealth
 --uh.fill=5
 rectfill(uh.x,uh.y,uh.x+uh.w,uh.y+uh.h,uh.cb)
 rectfill(uh.x,uh.y,uh.x+uh.fill,uh.y+uh.h,uh.cf)
end

function draw_panel(panel,horz,vert,fill,outline,centered)
	local x,y,w,h,gap = 0,0,0,0,1
	local special="⬅️➡️⬆️⬇️❎🅾️"
	local lines={}
	--panel height
	h = #panel*(5+gap)+gap
	--line width
	for i=1,#panel do
		local ln = panel[i]
		local w2 = #ln*4 + gap*2
		for j=1,#ln do
			for k=1,#special do
				if sub(ln,j,j)==sub(special,k,k) then
				 w2+=4
				end
			end
		end
		add(lines,w2)
		if (w2>w) w=w2
	end --line width
	--panel width
	if (horz=="l") x=0
	if (horz=="r") x=gamew-w
	if (horz=="c") x=gamew/2-w/2
	--panel height
	if (vert=="t") y=0
	if (vert=="b") y=gameh-h-1
	if (vert=="c") y=gameh/2-h/2
	if (vert=="m") y=gameh/2+h/3
	rectfill(x,y,x+w-2,y+h-1,1)
	rect(x-1,y-1,x+w-1,y+h,13)
	for i = 1,#panel do
		local ln=panel[i]
		local mod=0
		--if (gamew==64) ln=lowercase(ln)
		if (centered) mod=(w-lines[i])/2
		
		print(ln,x+gap+mod,y+gap+(i-1)*(5+gap),6)
	end --for
end

function lowercase(s)
	local d=""
	local c=true
	for i=1,#s do
		local a=sub(s,i,i)
			for j=1,26 do
				if a==sub("abcdefghijklmnopqrstuvwxyz",j,j) then
					a=sub("\65\66\67\68\69\70\71\72\73\74\75\76\77\78\79\80\81\82\83\84\85\86\87\88\89\90\91\92",j,j)
				end --if a
			end -- forj
		d=d..a
	end-- for i
	return d
end

--[[
function debug()
	local x,y,w,h,gap = 0,0,0,0,3
	h = #log*(5+gap)+gap --height
	for i=1,#log do --line width
		local w2 = #(log[i])*4 + gap*2
		if (w2>w) w=w2
	end --line length
	x,y = 127-w,127-h
	rectfill(x,y,x+w,y+h,1)
	rect(x,y,x+w,y+h,8)
	for i = 1,#log do
		print(log[i],x+gap,y+gap+(i-1)*(5+gap),6)
	end --for
end --debug()
--]]
-->8
--player
function init_player()
	p={     --attributes
		x=8,y=48,--pos
		speed=2,--walk speed
		jforce=-2.25,--jump force
		jumps=0,maxjumps=1,--jumps
		framerate=12,
		
		--temp stuff
		tx=0,ty=8,--temp x,y
		w=4,h=8,--start sprite
		cell=0,--map cell sprite
		dy=0,--for gravity
 	gnd=false,--on ground?
 	xscale=1,flip=false,--flip
 	--count=0,--current game frame
 	--frame=0,--current anim frame
 	--sp=3,
 	keys=0,
 	weapon=weapons.sword, --weapon
 	cx=0,cy=0, --change from last frame
		health=10,maxhealth=10,
		dead=false,
		x1=0,x2=0,y1=0,y2=0,spx=0,
		melee={x1=0,x2=0,y1=0,y2=0,spx=0},
	
 	anim={
 		rate=12,tick=0,fr=0,sp=0,
 		stand={sp={3},x=0,y=1,w=4,h=8,name="stand"},
			walk={sp={7,8},x=0,y=1,w=4,h=8,name="walk"},
			crouch={sp={2},x=0,y=2,w=4,h=8,name="crouch"},
			jump={sp={1},x=0,y=0,w=4,h=8,name="jump"},
			climb={sp={4,5},x=1,y=1,w=5,h=8,	name="climb"}
		}, --end anim
		--inventory={},
		w_anim={rate=15,tick=0,fr=0,sp=0,dur=10},
		weapons={},hitting=false
	} --end p
	p.state=p.anim.stand
	p.tx,p.ty=p.x,p.y
	p.px,p.py=p.x,p.y
	p.⬆️ = false --jump button
end

function update_player()
	btnu(⬆️)
 move_player() --walk,climb,crouch
 set_player_state()
 jump()
 fall()
 player_hitboxes()
 
 combat()
	player_combat()
 
 p.cell=mget(p.x/8,p.y/8)
 p.cx,p.cy=p.x-p.px,p.y-p.py
 p.px,p.py=p.x,p.y

	--animate_player()
	animate(p.anim,p.state.sp)
	--log_player()
	add(log,"p:"..flr(p.x)..","..flr(p.y))
end


function animate(obj,frames)
	 --update animation
 obj.tick+=1
 if obj.tick%(30/obj.rate) == 0 then
 	obj.fr+=1
 	if (obj.fr>#frames) obj.fr=1
		obj.sp = frames[obj.fr]
	end --if
end


function move_player()
	--walking
	local speed=p.speed
	if (groundis(75)) speed/=2
		
	if btn(0) then
		p.flip=true
		p.xscale = -1
		p.tx-=speed
		--p.state=p.anim.walk
	end
	if btn(1) then
		p.flip=false
		p.xscale = 1
		p.tx+=speed
		--p.state=p.anim.walk
	end
	
	--[      climbing
	if onladder() then
		if btn(2) then
			p.ty -= p.speed
			p.x = flr(p.x/8)*8
		elseif btn(3) then
		 p.ty += p.speed
			p.x = flr(p.x/8)*8
		end
	end --]] climbing
	
	--[  
	if not trymove() then
		p.tx,p.ty=p.x,p.y
	end --]]
	
	--[[
	if not (hithead() or	
 		 					hitground() or 
 		 					hitbounds()) then
 	p.tx,p.ty=p.x,p.y
	end	--]]
end --move()


function set_player_state()
	--setting animation states
	if (p.y != p.ty) then
		p.y = p.ty
		p.state=p.anim.climb
	elseif (p.x != p.tx) then	
		p.x = p.tx
		p.state = p.anim.walk
	elseif btn(3) and not onladder() then
		p.state=p.anim.crouch
	else
		p.state = p.anim.stand
	end
end --set_player_state()


function jump()
	if (onladder()) return
	if btnd(⬆️) and
				p.jumps<p.maxjumps then
		p.dy=p.jforce
		p.jumps += 1
		p.state=p.anim.jump
	end
end --jump()


function onladder()
	if (touching(83)) return true
end --onladder()


function fall()
	if (onladder()) return
	if not p.gnd then
		p.dy+=gravity
		p.ty+=p.dy
		if hitground() then
			p.jumps=0
			p.dy=0
			p.gnd=true
			p.y=flr(p.y/8)*8+p.state.y
		elseif hithead() then
			p.dy=0
		else
			p.y+=p.dy
		end
	else -- if not falling
		if not hitground() then
			p.gnd=false
		end
	end
end --fall()


function trymove()
 	p.w=(p.state.w-p.state.x-1)*p.xscale
 	p.h=p.state.h-p.state.y-1
 	
 	--p.w=p.state.w
 	--p.h=p.state.h

 	local hit = hithead() or	
 		 hitground() or hitbounds()
 	return not hit

end --trymove()


function pbox(temp)
	local x,y=p.x,p.y
	if (temp) x,y=p.tx,p.ty
	--return player hit box
	--[[
	local x1=x-p.state.w/2
	local x2=x+p.state.w/2
	local y1=y+7-p.state.h
	local y2=y+7
	--]]
	local x1 = x-p.state.x
	if (p.flip) x1=x-8+p.state.w
	local y1 = y-p.state.y
	local x2 = x1 + p.state.w
	local y2 = y1 + p.state.h
	
	local wx1 = x+p.weapon.x
	local wy1 = y+p.weapon.y
	local wx2 = wx1+p.weapon.w
	local wy2 = wy1+p.weapon.h
	
 return x1,y1,x2,y2,wx1,wy1,wx2,wy2
end --pbox()


function player_hitboxes()
 p.x1 = p.x --+p.state.x
	p.y1 = p.y-p.state.y
	p.x2 = p.x1 + p.state.w
	p.y2 = p.y1 + p.state.h
	
	p.melee.x1 = p.x+p.weapon.x*p.xscale
	p.melee.y1 = p.y1
	p.melee.x2 = p.melee.x1+p.weapon.w
	p.melee.y2 = p.melee.y1+p.weapon.h
	
 p.spx = p.x1
 p.melee.spx = p.melee.x1
	if p.flip then
		p.spx -= p.state.w
		p.melee.spx -= p.weapon.w
	end
end
 

function draw_player(outline)
	--player sprite
	spr(p.anim.sp,p.spx,p.y1,1,1,p.flip)
	
	--weapon
	spr(p.w_anim.sp,p.melee.spx,
					p.melee.y1,1,1,p.flip)
	
-- bounding boxes
	if outline then
		rect(p.x1,p.y1,p.x2,p.y2,6)
		rectfill(p.x,p.y,p.x,p.y,9)
		rectfill(p.x1,p.y1,p.x1,p.y1,10)
		rect(p.melee.x1,p.melee.y1,
							p.melee.x2,p.melee.y2,8)
		--[[
		rect(p.x+p.weapon.x*p.xscale*2,
					p.y+p.weapon.y,
					p.x+p.weapon.x*p.xscale*2+p.weapon.w,
					p.y+p.weapon.y+p.weapon.h,8)
					--]]
	end
end --draw_player()
	
	
	

--[[
function climb()
	local y=p.y
	if fget(mget(p.x/8,p.y/8),1) then
		if btn(2) then
			p.y -= p.speed
			p.state=p.anim.climb
		end
		if btn(3) then
			p.y += p.speed
			p.state=p.anim.climb
		end
	end
end
--]]

--[[
function move_player()
	if (p.state==p.anim.stand
		or p.state==p.anim.walk) then
		walk()
	end
end

function walk()
	local x,y = p.x,p.y
	if (btn(0)) x-=speed
	if (btn(1)) x+=speed
	if (collide(p) == false) then
		p.x,p.y = x,y
		p.state = p.anim.walk
	else
		p.state = p.anim.stand
	end
end
--]]

--[[
function log_player()
	log={}
	add(log,"x,y: "..p.x..","..p.y)
	add(log,"w,h: "..p.state.w..","..p.state.h)
	add(log,"sprite: "..p.state.sp[1])
	add(log,"state: "..p.state.name)
	add(log,"xscale: "..p.xscale)
	add(log,"map cell: "..p.cell)
end
--]]

 	--[[
 	log={}
 	add(log,"player: "..p.x..","..p.y)
 	add(log,"anim x,y: "..p.state.x..","..p.state.y)
 	add(log,"anim w,h: "..p.state.w..","..p.state.h)
 	add(log,"xmod: "..p.w..","..p.h)

 	--]]
-->8
--enemies

function init_enemies()
	enemies={}
	enemy_classes={
		{sp=16,name="default",dmg=1,
			health=5,speed=.5,w=8,h=8,
			cool=10,hitc=6,hitr=8},
		{sp=24,name="skeleton",dmg=2,
			health=3,speed=.5,w=5,h=8,
			cool=10,hitc=6,hitr=8},
	}
	e_hitflash=15
end


function update_enemies()
	local gx,gy=flr(p.x-gamew/2)/8,flr(p.y-1-gamew/2)/8
	for i=gx,gx+gamew/8 do
		for j=gy,gy+gameh/8 do
			if (fget(mget(i,j),7)) wake_enemy(i,j)
		end
	end
	foreach(enemies,update_enemy)
end


function wake_enemy(mx,my)
	local sp=mget(mx,my)
	local c=getclass(sp)
	local e={x=mx*8,y=my*8,tx=mx*8,ty=my*8,
							sp=sp,w=c.w,h=c.h,
							health=c.health,
							speed=-c.speed,
							flipx=c.flipx,cool=0,
							hitflash=0,class=c}
	add(enemies,e)
	mset(mx,my,0)
end


function getclass(sp)
	for e in all (enemy_classes) do
		if (e.sp==sp) return e
	end
	return enemy_classes[1]
end


function update_enemy(e)
	--sleep if offscreen+full health
	
	--if not hitting wall, move
	--local d = 1
	--if (e.flipx) d=-1  --direction
	e.tx = e.x+e.speed
	if bonk(e.tx+4,e.ty) or 
		e.tx<0 or e.tx>128*8 then
		e.tx = e.x
		flip_enemy(e)
	else
		e.x = e.tx
	end
	
	if e.hitflash>0 then
		e.hitflash -=1
	end
	
	--add(log,e.class.name.." "..flr(e.x)..","..flr(e.y))
end

function flip_enemy(e)
		e.flipx = not e.flipx
		e.speed *= -1
end

function draw_enemy(e)
	--flash enemy if damaged
	if e.hitflash>0 then
		pal(e.class.hitc,e.class.hitr)
	end
	
	local sprx = e.x
	if (e.flipx) sprx=e.x-8+e.w
	spr(e.sp,sprx,e.y,1,1,e.flipx)
	
	rect(e.x,e.y,e.x+e.w,e.y+e.h,8)
	rectfill(e.x,e.y,e.x,e.y,9)
	pal()
end
-->8
--collision

function box(obj,temp) --return box
 local x,y = obj.x,obj.y
 if (temp) x,y=obj.tx,obj.ty
 local x1=x-obj.w/2
 local x2=x+obj.w/2
 local y1=y+7-obj.h
 local y2=y+obj.h
 return x1,y1,x2,y2
end --box()


function collide(a,b)
 if a.x+a.w>b.x and
 			b.x+b.w>a.x and
 			a.y+a.h>b.y and
 			b.y+b.h>a.y then
 	return true
 end
 return false
end --collide

function collide_xy(a,b)
 if a.x2>b.x1 and
 			b.x2>a.x1 and
 			a.y2>b.y1 and
 			b.y2>a.y1 then
 	return true
 end
 return false
end --collide


function touching(sp)
	local x1,y1,x2,y2 = box(p,true)
	if mget(x1/8,y1/8) == sp or
				mget(x2/8,y1/8) == sp or
				mget(x1/8,y2/8) == sp or
				mget(x2/8,y2/8) == sp then
		--return fget(p.cell,1)
		return true
	end
end --touching()

function near(sp)
	--local x,y = flr(p.x/8),flr(p.y/8)
	local ym = flr(p.y/8)
	local mod={-6,0,6}
	for i=1,#mod do
		local xm=flr((p.x+mod[i])/8)
		if mget(xm,ym) == sp then
			return xm,ym,true
		end
	end
	--if (mget(x,y) == sp) return x,y,true
	--if (mget(x-1,y) == sp) return x-1,y,true
	--if (mget(x+1,y) == sp) return x+1,y,true
end --near()


----- player collision
function bonk(x,y)
 --add(log,"bonk: "..x..","..y)
 --add(log,"bonk: "..x..","..y)
 return fget(mget(x/8,y/8),0)
end --bonk

function hithead()
	if bonk(p.tx,p.ty+p.state.y) or
				bonk(p.tx+p.w,p.ty+p.state.y) then
		return true
	end
end --hithead()

function hitbounds()
	if p.tx<0 or p.tx+p.w<0 or
				p.tx>128*8 or p.tx+p.w>128*8 or
				p.ty<0 or p.ty+p.h<0 or
				p.ty>63*8 or p.ty+p.h>63*8 then
		return true
	end
end --hitbounds()

function hitground()
--one point only
	if (bonk(p.tx,p.ty+p.h)) return true
	
	--[[
	local x1,y1,x2,y2 = box(p,true)
	--local x1,y1,x2,y2 = pbox(p.tx,p.ty)
	if (bonk(x1,y2) or 
					bonk(x2,y2)) then
		return true
	end --if
	--]]
	
	--[[
	--local x1,y1,x2,y2 = pbox(p.tx,p.ty)
	if bonk(p.tx,p.ty+p.h) or
				bonk(p.tx+p.w,p.ty+p.h) then
		return true
	end
	--]]
end --hitground()

function groundis(sp)
 if mget(p.tx/8,p.ty+10/8) == sp then
 	return true
 end
end






--[[
 function collide(p,e)
 	local x1,y1,w1,h1 = 
 		p.x+p.state.x,
 		p.y+p.state.y,
 		p.state.w,p.state.h
 	local x2,y2,w2,h2 =
 		e.x,e.y,e.w,e.h

 	if (x1+w1>x2 and x2+w2>x1 and
 					y1+h1>y2 and y2+w2>y1) then
 	 return true
 	else
 		return false
 	end
 end
 --]]



 --[[
 function hitwall()
 	--facing left
 	local mod=(p.state.w-p.state.x)*p.xscale
	local x=p.tx+mod*p.xscale
	local y=p.ty-p.state.y
	local top=mget(x+mod,y)
	local btm=mget(x+mod,y+p.state.h)
	if fget(top,0) or 
				fget(btm,0) then
		return true
	else
		return false
 	end
 end
--]]

--[[
 function collide_all()
 	for e in all (enemies) do
 		if (collide(p,e)) return true
	end
	for w in all (walls) do
		if (collide(p,w)) return true
 	end
 	return false
 end
 --]]
 
--[[
function bonk4()
	if bonk(p.tx,p.ty) or
				--bonk(p.tx,p.ty+p.h) or
				bonk(p.tx+p.w,p.ty) or
				--bonk(p.tx+p.w,p.ty+p.h) then
				hitground() then
		return true
	end
end --bonk4()
--]]
-->8
--combat

function combat()
	--local x1,y1,x2,y2 = box(p)
	--local pp = {x=p.x1,y=p.y1,w=p.state.w,h=p.state.h}
	--[[
	local pp = {x=x1,y=y1,w=x2-x1,h=y2-y1}
	local pw = {w=p.weapon.w,
		x=p.x+p.weapon.x*p.xscale*2,
		y=p.y+p.weapon.y,h=p.weapon.h}
	--]]
	for e in all (enemies) do
		local ee = {x=e.x,y=e.y,
		w=e.class.w,h=e.class.h}
		local exy = {x1=e.x,y1=e.y,x2=e.x+e.class.w,y2=e.y+e.class.h}
		
		-- enemy hits player
		if e.cool>0 then
			e.cool -= 1
		elseif collide_xy(p,exy) and e.cool<=0 then
			p.health -= e.class.dmg
			e.cool = e.class.cool
		end --if e hit p
	
 	-- player weapon hits enemy
 		if btnp(❎) and collide_xy(p.melee,exy) then
				hit_enemy(e)
			end --if btnp(❎)
		
		if (p.health<=0) p.dead=true
	end --enemies loop
end


function player_combat()
 if p.hitting then
		animate(p.w_anim,p.weapon.sp)
		if p.w_anim.tick>p.w_anim.dur then
			p.hitting=false
		end --tick
	else --if not p.hitting
		if btnp(❎) then
			p.w_anim.tick=1
 		p.hitting=true
 	end
		p.w_anim.sp=p.weapon.sp[1]	
	end --p.hitting
end --player_combat


function hit_enemy(e)
	e.health -= p.weapon.dmg
	e.hitflash=e_hitflash
	if e.health <= 0 then
		del(enemies,e)
	end --if health<=0
	e.flipx = e.x<p.x
	e.x += 4 * sgn(e.x-p.x)
end

--[[
function attack(e)
	local wp = {w=p.weapon.w,
		x=p.x+p.weapon.x*p.xscale,
		y=p.y+p.weapon.y,h=p.weapon.h}
		
	local ee = {x=e.x,y=e.y,
		w=e.class.w,h=e.class.h}
 
 if collide(wp,ee) then
		e.health -= p.weapon.dmg
		if e.health <= 0 then
			del(enemies,e)
		end --if health<=0
		e.flipx = e.x<p.x
		e.x += 4 * sgn(e.x-p.x)
		
	end --if collide
end
--]]
-->8
--items

function init_items()
	weapons={
		none={dmg=0,t=1,r=0,
			x=4,y=1,w=4,h=7,dur=0,
			sp={15}},
		sword={dmg=2,t=5,r=4,
			x=4,y=0,w=4,h=7,dur=10,
			sp={9,10,11}}
	}
	
end
 
function update_items()
 	local x,y,t=near(84)
 	if t then --key
 			--set_ipanel({"iron key","❎ take"})
 			set_ipanel({"🅾️ take key"})
 			if btnp(🅾️) then
 				set_ipanel({"key taken"})
 				p.keys += 1
 				mset(x,y, 0)
 			end
 	end --keys
 	
 	local x,y,t=near(81)
 	if t then --door
 		if (p.keys>0) then
 			set_ipanel({"🅾️ unlock door"})
 			if btnp(🅾️) then
 				set_ipanel({"door unlocked"})
 				p.keys -= 1
 				mset(x,y,82)
 			end
 		else
 			set_ipanel({"locked door"})
 		end
 	end -- locked door
 		
 	local x,y,t=near(79)
 	if t then --door
 			set_ipanel({"🅾️ open door"})
 			if btnp(🅾️) or btnp(❎) then
 				set_ipanel({"door opened"})
 				mset(x,y, 80)
 			end
 	end --wooden door
 	
 	--[[
 	--bash door
 	local x,y,t=touching(79)
 	if (t) mset(x,y,80)
 	--]]
 		
end --update_items()

--[[
function draw_items()
 	--[[
 	for k in all (keys) do
 		spr(84,k.x*8,k.y*8)
 		spr(84,k.x,k.y)
 	end
 	--]]
 end --draw_items
--]]

--[[
function make_items()
 	--temp_item=nil
 	for y=0,32 do
 		for x=0,128 do
 			--local cell=mget(x,y)
 			--[[
 			if cell==84 then --key
 				add(keys,{x=x,y=y})
 				add(keys,{x=x*8,y=y*8,
 					w=8,h=8,name="key"})
 				mset(x,y,0)
 			end -- key
 			--]]
 		end -- for x
 	end --for y
end --make_items
--]]
-->8
--notes
--[[ comments
sprite, name, damage, health
24 skeleton dmg=2,health=3





--biomes

biome names!!!!!

prison,outside,uderground beach
snowy mountan caves,unmeables cavern
aliens home,music jungle






]]
__gfx__
00000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000ce0000000000000c000000005c00c0000c00c5000000000c0000000c000000000600000000500000000000000000000000000000000000000000000
0070070008805000c00000000ce00000050cc000000cc050000000000ce000000ce0000006000000055500000000000000000000000000000400004000000000
00077000088500000ce0000008805000055885500558855000000000088050000880500060000000555500000000000000000000000000000440044004000000
00077000022000000880000008850000000880500508800000000000088500000885000000000000666600005555000000000000000000000488884004bbbb00
007007002002000008850000022000000022205005022200001100c00220000002200000000000000000000065550000000000000000000000181800041b1b00
00000000000000000220000020020000002002000020020022288c002002000020020000000000000000000006500000000000000000000000b8bb0004bbbb00
00000000000000002002000020020000000002000020000022288e000002000020000000000000000000000000600000000000000000000000bbbb0004bbbb00
00000000600005000000000000000000000000000000000000000900000000000555000001055500010555001105550000055500e4e4d8d80000000000000000
60000500600d50c06000050060000500000000000000000000009990000000000c5c0000010c5c00010c5c00110c5c00000c5c00444488880000000000000000
600d50c060122010600d50c0600d50c0005000000000000000000900aa1b1baa0555000005655500056555000605550600055506444488880000000000000000
60122010510221006012201060122010000500000000000000000000a7bbbb7a0666000005066600050667770666666606666666444488880000000000000000
51022100050110005102210051022100000600000000bbbb00001b1b77bbbb7760606000000060600000677700006000000060001b1bc9c90000999900008888
050110000010010005011000050110000506110000001b1b0000bbbb00bbbb000010000000001000000017770000100011001000bbbb99990000c9c90000d8d8
00100100000000000010010000100100005621110000bbbb0000bbbb000000000101000000010100000101700001010011010100bbbb99990000999900008888
00100100000000000010000000000100c0d221110000bbbb0000bbbb000000000101000000010100000101000001010000010100bbbb99990000999900008888
00000000000000000000000000000000000000006008800600000110000000000000000000000000000005500000000000000000000000000000000000000000
00444400000000000000000000000000000000006001100600000110060777770600c0c0000000007700015000000000000c5c00000000000000000000000000
6094940000000000000000000000000000001100601111060000c88c6467c5c70600110000888880070005500000000000005000005000000000000000000000
60444400000000000001111100000000000005006111111600008888040775770bb001b0008ccc800dddd6600000000005666665005500000000000000000000
600400000000000400010000000011110000111155111155000002200457777700bbb1b000888880060006600000000005066605000550000011110000004444
6555550004940554000100000000818100008181001001000000222204077777000011100000200006005665000ddd000500600500005000005000000000e4e4
55040550044455440080800000001111000011110010010000002002040666660000b0b0000020000600555555566655057777750c0667770c6c000000004444
00044444049444400000000000001111000011110000000000002002000650560000b0b000002222000050055156665500700070055067770666777700004444
00000000000000000006000000000000000000000bbb333000003330000ccc000000000000000000000000000c0c000000000000000019000000000000000000
00000000000cccc0886660000000000000000bbb0b0000300000bbb0000080000000000000000000000000000088000000000000000111000000000000000000
00000000cc7c66c7888600600000000000000b000b00003000003330099080990090900000000000000000000090000000000000001191000000000000000000
000c0000007cccc7cc8006660000000000000b000b0000300000b0000998b89990bbbb0999900999009bb9000099900000000000019111100000000000000000
00cc7777cc777777cc88886806000000000bbb00bbb00333000bbb0009ab8ba90bb99bb09a9009a99bb99bb9000099000000000000bbbb0006bbbb0000bbbb44
000c6767007cccc70888880866606000000bbb00bbb00333000bbb0009a8b8a9bb9999bbbbbbbbbbbb9999bb000aaa0000000000101b1b00061b1666001b1449
00cc7777cc7cccc788888888c6866688000bbb0000000000000bbb000aa000aab999999b9b9bb9b9b999999b000a0a00c899aa0040bbbb0006bbb66604bbbb94
000c7777000c00c080080080cc8868880000000000000000000000000000000099000099999999999999999900a00a00c99aa0aa04bbbb0004bbbb6006bbbb44
11111111511111515111511622222228bbbbbbbbbbbbbbbb1c1c1c1cccceeccc77776777c7cccccccc888877dddddd4544444444000011000001111000004400
111111111511151116151151222e2228b377773bb333333bc1c1c1c1c8eeee8c777777677c7ccc7c7c8888c6d55ddd4544444644000018000001118000004400
15111151151151111151161522e28888b739937bb3bbbb3b11111111cc9ee9cc67677777cccc7cc777c777c7d5d5445445444444000081000001118000004400
1151151111511511111651112e228e22b793397bb3b33b3bc1c1c1c1c8c99c8c77777677ccc7ccc7677cccc7d555445444444544000088000001888000005500
11155111151551111115611122e282e2b793397bb3b33b3bdcdcdcdc9c9889c977767777ccc7ccc777cc7776d555554544444444000088000001118000004400
11588511511155115161151122888e22b739937bb3bbbb3bdddddddd898888987767777777cc7cc776cc8887d5d5444544454444000018000001888000005500
111551111511151115115161228222e2b377773bb333333bdcdcdcdc9c9889c977777767cc7ccc7c77c78886dd55445444444464000081000001118000004400
11111111511111516115111522822222bbbbbbbbbbbbbbbbcdcdcdcdc8c88c8c76777777ccc7cccc67ccccc7dddd445446444444000011000001111000004400
00044440000066000006666040000004000060000000000000000000a99ada9900000000111111111111111182222222b333333b060060000000000000000000
00044440000066000006666044444444000606000000000000000000a9aaa99a0000000018811111111111158888222833044033606660000000000000000000
00044440000077000006667040000004000060000000000000000000a9aa99aa000000001118818811111d51222882883b0440b3060000000044440000000000
00055550000055000006665044444444000060000000000000000000aaa99aaa00000000111118811115155122228282bb0440bb000000000007700000000000
00044440000055000006665040000004000060000505050500000000da99aa9a0000000011818811111155518888828cbb0440bb000000000078870000000000
00055550000077000006667044444444006660000505050500500050a99aaa9a0000000011818111111112218888888cb004400b000000000789997000000000
00044440000066000006666040000004000060000505050505050505a9adaa9a00000000118111811111211288222ccc33344333000000000079870000000000
0004444000006600000666604444444400666000666666666666666699aaa9ad00000000181118811111211222222ccc30044003000000000007700000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000d3d3d300000000000000000054000000005400000000000000c4c43500c4000000000000d5d500750000000000000000000000d50000d575000000
8435848484008584848484843584000000000000000000000000000000008590000000d5d5d5d5d500d5d5d500000000000000d5d5d5d5d5d5d5d5d5d5d5d500
0000850cd3d3d3d3008585850000000000540071d5d500545454c4c4c4c4c4d3358585c4c4c4d5a7000bbb0075d58585d5d5d5d5d5d5d5d5d5d5d5d575000085
75357585858485858585858535840000000000000000000000000000000085000000d5d5d5bbbb7700d5d5d500d500d5d5d5d5d5d5d5d5d5d5d5d5d5d5000000
8585d3d3d3d3d3d3d38585858500000000540071d5d50000000000000000f485358585f285f2c40700d5757575d5d5d5d5d5d5d5e1e1d50000d5d50075000000
753575858584848585850072358400000000000000000000000000000000bbbb00d5d5d5d5bbbb00000bd5d5d5d50000d5d5d5d5d5d5d5d5d5d5d5d5d5000000
d3d385d3d3d3d3d3d38585858500000000540000000000545454c4c4c4c4c4c4c4c4c4c4c4c40000000b7500f400000000000000757575757575757575000000
753575850084848484848484358400000000000000000000000000000000bbbb0000bbbb00343500000b0b00d5d5d5d5d5d5d5d5d5d5d5d5d5d5000000000000
d3d3d38585858585858500008500000000546161000054000000000000000000753585000000e100004575007564646464646464757575757575757500000000
753575000000850000000084358400000000000000000000000000000000000000000000003435000000000000d5d50000000000d5d5d5d50000000000000000
85008585850085850085000085000000005454545454540000000000000000007535756464646455557500007575757575757504858585858585850004757575
75357500000000000000008435840000000000000000000000000000000000000000000000343500000000000000000000000000000034343434343434000000
85858500000000000085008585000000000000000000000000000000000000007535757575757575758500007500000000000004000000000000000004757575
7535750000000000000000843584000000000000000000000000000000000000000000000034350004343434343434000000000000348500620000d534000000
0000000000000000000000850000000000000000000000000000000000000000743500510000858500e1000015000000000000d48500008585850000d4000000
00357500008484848484840000008484848484848484840000000000000000000000000000343500040000000000000434343434343400343434343534000000
0000000000000000000000000000000000000000000000000000000000000000856464646464647575757575757575757575750485858585b385850004757575
75757500840000000000000000000000000000720000840000000000000000000000000000343500d4000000000000d400000000000000000000343534000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000646464646464646400000000
00000000840000000300000384848484848484848435840000000000000000000000000000343434040000230000000434343434343434343434343534000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000008472008484848400000000000000008435840000000000000000000000000000000000043434343434340400000000348500000000003534000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000084720000008400000000000000858435840000000000000000000000000000000000000000000000000000000000343500000000003534000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000848585008400000000000000858435840000000000000000000000000000000000000000000000000000000000343500000000b53534000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000848484358400000000000000008435840000000000000000000000000000000000000000000000000000000000343534343434003592000092
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000085850084358400000000000000008435840000000000000000000000000000000000000000000000000000000000343500000000343434343434
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000858500000084358400000000000000008435840000000000008584848484840000000000000000000000000000000000343500006200000000853534
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084358400000000000000008435840000000000008584350035840000000000000000000000000000000000003434000062000000853534
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084358400000000000000008435840000000000000084358435840000000000000000000000000000000000000000343400343434343534
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000008435848484848484848484a435840000000000000084358435848500000000000000000000000000000000000000000034340000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084358572000000000000008535840000000000000084358435840000000000000000000000000000000000000000000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084350000848494949494948484840000000000000084358435840000000000000000000000009000000000000000000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084358484840000000000000000000000000000000084358435840000000000000000000000004300c50000000000000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000084358484848400000000008484848484848400000084358435840000000000000000000054545454545454000000000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000008435848484848484848404000000000000000484848435843584000000000000000000540000000000000054d500000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000008435000000001300e200d400858585000000d40000003584358400005300000053005400000000000000005454d5000000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000008484848484848484848404008585c200000004848484848435848585858500000054000000000000000000005454850000000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000949494949494940000000000843500858585c50000d3000000000000000000000000545400d4000000003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000008484845454545454540000000000000000000000000000545404000083003554
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000c4c4c4c4c4c4c4c4000000000000000004545454545454
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c400000000000000000000000000c4
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4000000000000000093630093c4
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4c4c4c4c4c4c4c4c4c4c4c4c4
__gff__
0000000000000000000000000000000080808080008080c080808080808080808000808080808080808080008000808080808000c0c0c080800000800000000001010101010101010101010101000001000100020000000100010101000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4242424242424242424242424200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200585851535800530000184200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242534242534242424200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4258585858534242535100184200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4254606058534242534242424200585858580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242534242534f00544200585858000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4258585842534242424253424200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
420000004f534200004153410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242424200004153410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200000000000000004153410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200000000000000004153410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200005800000000004153410000000042424200000000000058000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242424242420000004242424200000042424242424258580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200510000000000000000005400005800000000000051004258580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
42424200190c4242424253424242424242180000424242425858580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200004b4b4c0000004253420000000000424242000000424245454545454545454545454545454545454545454500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4200000000000000004253420000000000000000000000425300000000000000170000000000000000000000000045450000585800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242424242424253424242424242424242420000425300580000000000000000000000000000000000000000004500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000534200000000000000004200004c5345454545454500150000170000000000000000000000004500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001b00581a00001b00005100002800540028004200004c534c4c4c4c4c4c45450000000000000000000000000000544400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00424242424242424242424242424242424242534258584c534c4c4c4c4c4c4c4c4500150000001d3d00165d000045450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
004200000000000000000000000000000000425342585842534c4c4c4c4c4c4c4c4c45454500004545454545454500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
004200000000000000000000000000000000425342000042534c4c4c4c4c4c4c4c4c4c4c4c00004c4c4c4c4c4c4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0042000000000000424242424242424200004253420000425342000000000000000000004c00004c005d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0042424242424040000000000000000041004253420000425342000000000000000000004c00004c5d5d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000040000000000000000041004253420000425342000000000000000000004c00584c000000004c4c4c004c4c4c4c4c4c4c58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000584d00000000000000004d00425342424242534200000000004c4c4c4c4c4c00584c4c4c4c4c00004c4000000000000000404c4c4c000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4242424242424040000000002a000000410000584f000000534200000000004c530000004f00004f000000000000514d000000000000004d00004c000000000000000000000000004800480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000042424242424242420042424242424242424200000000004c534c4c4c4c4b4b4b4b4c4c4c4b4b4b4000000020000000404c534c000000000000000000000000480000004800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000004c534c000000000000000000004c4c4c00434c4c4b4c4c43004c534c000000000000000000000048000000480048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000004c534c000000000000000000000000000000000000000000004c534c000000000048484848484800000048000053480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000003d3d3d00000000000000000045454545454500000000000000004c534c000000000000000000000057575757575757575757574c534c575700000048530000000000584800000053480000000000000000000000000000000058000000005d5d000000005d005d00000000000000005d5d5d5d5d5d5d5d5d5d5d00
